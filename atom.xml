<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[言午木杉木杉]]></title>
  <link href="http://xubinbin.github.io/atom.xml" rel="self"/>
  <link href="http://xubinbin.github.io/"/>
  <updated>2014-10-01T21:39:45+08:00</updated>
  <id>http://xubinbin.github.io/</id>
  <author>
    <name><![CDATA[REEL]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[简析id与class的区别及用法]]></title>
    <link href="http://xubinbin.github.io/blog/2014/10/01/id-and-class/"/>
    <updated>2014-10-01T12:44:48+08:00</updated>
    <id>http://xubinbin.github.io/blog/2014/10/01/id-and-class</id>
    <content type="html"><![CDATA[<p><img src="http://xubinbin.qiniudn.com/id%E4%B8%8Eclass%E5%AF%B9%E5%BA%94%E5%9B%BE.jpg" title="id与class对应图" alt="Alt id&amp;class" /></p>

<p>我们平常在用div+css制作网页时，常会用到id或者class来选择调用CSS样式属性。而就实现的页面效果而言，两者的视觉效果并无差别，那么我们什么时候该用id，什么时候又该用class，以及它们两者的命名规则和注意事项都有哪些呢？</p>

<!--more-->


<p><strong>命名和调用</strong></p>

<p>通常我们在CSS样式定义的时候，以“#”开头来命名id，以“.”开头来命名class；而在html结构中，以<code>&lt;div id=""&gt;&lt;/div&gt;</code>和<code>&lt;div class=""&gt;&lt;/div&gt;</code>的形式来进行调用。</p>

<p>注意：在命名id和class的时候要区分英文字母大小写，不要使用中文命名。</p>

<p><strong>id使用规则</strong></p>

<p>id具有唯一性，相同的id在同一个网页页面只能出现一次，并且一般在外围使用，因此网页的框架布局通常使用id，例如：logo、导航、主体内容、版权等，根据命名规范分别命名为#logo、#nav、#content、#copyright。</p>

<p>另外，在JS脚本中也会用到id，例如当JS要修改某一个标签的属性，以实现某种效果的时候，JS会将id作为该标签的唯一标识进行操作。这也是由id的唯一性决定的。</p>

<p><strong>class使用规则</strong></p>

<p>class在CSS定义中具有普遍性，相同的class在同一个网页页面可以无数次地调用，这体现了div+css布局的优越性。class常用于结构内部，通常是id的子级或者孙级，应避免出现class包含id的情况。</p>

<p>本文参考了以下资源：</p>

<p>[1] <a href="http://www.divcss5.com/rumen/r3.shtml">CSS中的class与id区别及用法</a></p>

<p>[2] <a href="http://www.codesky.net/article/201110/169389.html">id和class的选择</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS浮动与清除浮动]]></title>
    <link href="http://xubinbin.github.io/blog/2014/07/30/float-and-clear-both/"/>
    <updated>2014-07-30T22:34:27+08:00</updated>
    <id>http://xubinbin.github.io/blog/2014/07/30/float-and-clear-both</id>
    <content type="html"><![CDATA[<p><strong>float属性</strong></p>

<p>在CSS中的相关内容是：float: none | left | right</p>

<p>none：对象不浮动</p>

<p>left：对象浮在左边</p>

<p>right：对象浮在右边</p>

<p>float属性用于设置html标签的浮动样式，它定义元素在哪个方向浮动。在CSS中，任何元素都可以浮动。浮动元素会生成一个块级框（box），而不论它本身是何种元素。<!--more-->（注释：假如在一行之上没有足够空间可供元素浮动，那么该元素会跳至下一行，直到某一行拥有足够的空间为止。）</p>

<p>我们应注意与文字内容靠左（text-align: left）和文字内容靠右（text-align: right）这两个属性的区别，float属性只能针对html标签设置浮动样式。此外，float属性没有居中的浮动样式，需通过设置CSS的margin属性来实现居中。</p>

<p><strong>清除浮动的几个方法</strong></p>

<p>在使用float浮动属性进行排版之后，如果没有对子级盒子相应地清除浮动，会造成父级盒子无法被撑开，从而导致父级的背景或边框不能正确显示的问题。</p>

<p><strong>方法一：首先，介绍最普遍被使用的方法——使用clear: both清除浮动。</strong></p>

<p>clear属性的语法：</p>

<p>clear: none | both | left | right</p>

<p>none：允许两边都可以有浮动对象</p>

<p>both：不允许有浮动对象</p>

<p>left：不允许左边有浮动对象</p>

<p>right：不允许右边有浮动对象</p>

<p>CSS手册上是这样说明的：该属性的值指出了不允许有浮动对象的边。这个属性是用来控制float属性在文档流的物理位置的。</p>

<p>当元素设置float浮动属性时，其所在的物理位置就已经脱离文档流了，但是大多数时候我们希望文档流能识别float浮动属性，或者是希望后面的元素不被float浮动属性所影响，这时候就需要用clear: both来清除浮动了。</p>

<p>具体方法如下：</p>

<p>首先，为了统一样式，我们新建一个样式选择器命名为“.clear”，并且对应设置选择器样式为“clear: both;”，然后在父级“<code>&lt;/div&gt;</code>”结束前，添加一行代码<code>&lt;div class="clear"&gt;&lt;/div&gt;</code>，即可实现清除浮动。</p>

<p>对于因多加的代码<code>&lt;div class="clear"&gt;&lt;/div&gt;</code>而引起的高度变化，可以通过如下方法解决：</p>

<pre><code>clear {
     clear: both;
     height: 1px;
     margin-top: -1px;
     overflow: hidden;
}
</code></pre>

<p><strong>方法二：使用:after清除浮动</strong></p>

<p>在CSS中关于:after（伪对象）的说明：设置在对象后发生的内容，通常和content配合使用，IE6、IE7不支持此伪对象。</p>

<p>常用的代码格式如下：</p>

<pre><code>.clearfix:after {
    content: "."; 
    display: block;
    height: 0px; 
    visibility: hidden;
    clear: both;
}
</code></pre>

<p>首先设置display: block;，因为display的默认值是“inline”，不能收到clear的特性。同时将高度设为零（height: 0px;），可见度设为隐藏（visibility: hidden;）。</p>

<p>使用:after伪类清除浮动的优点是可以减少代码冗余，但在代码结构比较复杂或者清除浮动操作频繁的情况下，使用clear: both清除浮动是更好的选择。</p>

<p><strong>方法三：为父级盒子设置overflow: hidden</strong></p>

<p>首先，为什么加入overflow: hidden能实现清除浮动的效果呢？</p>

<p>如上文提到的，当元素设置了float浮动属性之后，它实际上就脱离了文档流。而我们对父级盒子设置overflow: hidden的作用就相当于是清除了父级在垂直于屏幕方向上的浮动，使父级回到文档流内。这样，父级盒子和子级盒子又重新处在一个层级之上。当我们没有给父级盒子设定长宽值的时候，子级盒子会撑开父级盒子，最终可显示的范围就是子级盒子的长宽值。这一情况解释了使用overflow: hidden清除浮动的原理。</p>

<p>在另一种情况下，如果我们给父级盒子设定一个具体的长宽值，那么无论子级盒子的长宽值是多少，最终显示的范围都是我们所设定的父级盒子的长宽值。这时，当子级盒子的范围超过父级盒子时，超出的部分就会被隐藏。这就是overflow: hidden隐藏溢出的含义的一个具体表现。</p>

<p>以上三种是各大浏览器兼容的清除浮动的方法。另外，这里提供一种不经常使用的方法仅供参考，符合条件的话可以灵活运用。</p>

<p><strong>补充方法：对父级设置适合的高度</strong></p>

<p>通过设置height属性的方法清除浮动，前提是父级内容高度要能够确定并计算好。</p>

<p>本文参考了以下资源：</p>

<p>[1] <a href="http://www.w3school.com.cn/cssref/pr_class_float.asp">CSS float属性</a></p>

<p>[2] <a href="http://www.cnblogs.com/jenney-qiu/archive/2012/03/28/2421819.html">巧用clear: both</a></p>

<p>[3] <a href="http://www.chinaz.com/design/2008/0818/35473.shtml">全面阐述overflow: hidden属性</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解定位之二：z-index属性]]></title>
    <link href="http://xubinbin.github.io/blog/2014/07/19/z-index/"/>
    <updated>2014-07-19T22:46:02+08:00</updated>
    <id>http://xubinbin.github.io/blog/2014/07/19/z-index</id>
    <content type="html"><![CDATA[<p><strong>首先，接着上一篇博文的内容，先简单说一说CSS中关于定位设置的position属性。</strong></p>

<p>在CSS中的相关内容是：
position: relative | absolute | static | fixed</p>

<p>static（静态）：没有特别的设定，遵循基本的定位规定，不能通过z-index进行层次分级。</p>

<p>relative（相对定位）：对象不可层叠、不脱离文档流，参照自身静态位置通过TOP、RIGHT、BOTTOM、LEFT定位，并且可以通过z-index进行层次分级。</p>

<p>absolute（绝对定位）：对象脱离文档流，通过TOP、RIGHT、BOTTOM、LEFT定位。选取其最近一个具有定位设置的父级元素进行绝对定位，如果元素的父级没有设置定位属性，对象将以浏览器的左上角坐标为原点进行定位，可以通过z-index进行层次分级。</p>

<p>fixed（固定定位）：这里所固定的参照对象是可视窗口而并非是以浏览器的左上角坐标或是父级元素为参照，可通过z-index进行层次分级。</p>

<!--more-->


<p><strong>z-index属性的用法</strong></p>

<p>在CSS中的相关内容是：
z-index: auto | number</p>

<p>auto：遵从其父级元素的定位。
number：无单位的整数值，可为负数。</p>

<p>CSS中的z-index属性用于设置一个HTML元素的层叠级别，我们在使用时如果能熟练掌握以下规则，将会收到事半功倍的效果。</p>

<p><strong>顺序规则</strong></p>

<p>如果不对节点设置position属性，位于文档流后面的节点会默认遮盖前面的节点。</p>

<pre><code>&lt;div id="a"&gt;A&lt;/div&gt;
&lt;div id="b"&gt;B&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-1.gif" title="顺序规则" alt="Alt z-index-1" /></p>

<p><strong>定位规则</strong></p>

<p>如果将position设为static，位于文档流后面的节点依然会遮盖前面的节点。所以，position: static; 不影响节点的遮盖关系。</p>

<pre><code>&lt;div id="a" style="position: static;"&gt;A&lt;/div&gt;
&lt;div id="b"&gt;B&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-2.gif" title="定位规则1" alt="Alt z-index-2" /></p>

<p>如果将position设为relative，absolute或者fixed，这样的节点会覆盖没有设置position属性或者属性值为static的节点，说明前者比后者的默认层级高。</p>

<pre><code>&lt;div id="a" style="position: relative;"&gt;A&lt;/div&gt;
&lt;div id="b"&gt;B&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-3.gif" title="定位规则2" alt="Alt z-index-3" /></p>

<p>在没有z-index属性干扰的情况下，结合以上的顺序规则和定位规则，我们可以做出更加复杂的结构。这里我们对A和B都不设定position，但对A的子节点A-1设定position: relative， 根据顺序规则，B会覆盖A，又根据定位规则A-1会覆盖B。</p>

<pre><code>&lt;div id="a"&gt;
    &lt;div id="a-1" style="position: relative;"&gt;A-1&lt;/div&gt;
&lt;/div&gt;
&lt;div id="b"&gt;B&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-4.gif" title="定位规则3" alt="Alt z-index-4" /></p>

<p>上面互相覆盖在什么时候用到这样的实现？看起来偏门，其实很常用，比如说，电子商务网站侧栏的类目展示列表就可以用这个技巧来实现。</p>

<p>下图是某网站的类目展示区域，二级类目的悬浮层覆盖一级类目列表外框，而一级类目的节点覆盖二级类目的悬浮层。如果使用CSS实现展示效果，一级类目的外框相当于上面例子中的A，一级类目的节点相当于A-1，二级类目的悬浮层相当于B。</p>

<p><img src="http://xubinbin.qiniudn.com/z-index-5.jpg" title="定位规则4" alt="Alt z-index-5" /></p>

<p><strong>参与规则</strong></p>

<p>我们尝试不用position属性，但为节点加上z-index属性。发现z-index对节点没起作用。</p>

<pre><code>&lt;div id="a" style="z-index:2;"&gt;A&lt;/div&gt;
&lt;div id="b" style="z-index:1;"&gt;B&lt;/div&gt;
&lt;div id="c" style="z-index:0;"&gt;C&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-6.gif" title="参与规则1" alt="Alt z-index-6" /></p>

<p>z-index属性仅在节点的position属性为relative，absolute或者fixed时生效。</p>

<pre><code>&lt;div id="a" style="z-index:2;"&gt;A&lt;/div&gt;
&lt;div id="b" style="position: relative; z-index:1;"&gt;B&lt;/div&gt;
&lt;div id="c" style="position: relative; z-index:0;"&gt;C&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-7.gif" title="参与规则2" alt="Alt z-index-7" /></p>

<p><strong>默认值规则</strong></p>

<p>如果所有节点都定义了position: relative; 那么z-index为0的节点与没有定义z-index在同一层级内没有高低之分；但z-index大于等于1的节点会遮盖没有定义z-index的节点；z-index 的值为负数的节点将被没有定义z-index的节点覆盖。</p>

<pre><code>&lt;div id="a" style="position: relative; z-index:1;"&gt;A&lt;/div&gt;
&lt;div id="b" style="position: relative; z-index:0;"&gt;B&lt;/div&gt;
&lt;div id="c" style="position: relative;"&gt;C&lt;/div&gt;
&lt;div id="d" style="position: relative; z-index:-1;"&gt;D&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-8.gif" title="默认值规则" alt="Alt z-index-8" /></p>

<p>特别注意：当position设为relative，absolute或者fixed，而没有设置z-index时，IE8以上和W3C浏览器的z-index默认值是auto，但IE6和IE7却是0。</p>

<p><strong>从父规则</strong></p>

<p>如果A，B节点都定义了position: relative，且A节点的z-index值比B节点大，那么A的子节点一定覆盖在B的子节点前面。</p>

<pre><code>&lt;div id="a" style="position: relative; z-index:1;"&gt;
    &lt;div id="a-1"&gt;A-1&lt;/div&gt;
&lt;/div&gt;
&lt;div id="b" style="position: relative; z-index:0;"&gt;
    &lt;div id="b-1"&gt;B-1&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-9.gif" title="从父规则1" alt="Alt z-index-9" /></p>

<p>如果所有节点都定义了position: relative，且A节点的z-index和B节点一样大，但因为顺序规则，B节点覆盖在A节点前面。就算A的子节点z-index值比B的子节点大，B的子节点还是会覆盖在A的子节点前面。</p>

<pre><code>&lt;div id="a" style="position: relative; z-index:0;"&gt;
    &lt;div id="a-1" style="position: relative; z-index:2;"&gt;A-1&lt;/div&gt;
&lt;/div&gt;
&lt;div id="b" style="position: relative; z-index:0;"&gt;
    &lt;div id="b-1" style="position: relative; z-index:1;"&gt;B-1&lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><img src="http://xubinbin.qiniudn.com/z-index-10.gif" title="从父规则2" alt="Alt z-index-10" /></p>

<p>因此，出现将z-index设得很大，甚至z-index：9999，却仍然没有改变层叠关系的情况。因为如果不考虑父节点的影响，子节点设得再大也没有用，这是无法逾越的层级。</p>

<p>本文参考了以下资源：</p>

<p>[1] <a href="http://www.neoease.com/css-z-index-property-and-layering-tree/">CSS z-index属性的使用方法和层级树的概念</a></p>

<p>[2] <a href="http://blog.sina.com.cn/s/blog_4bcf4a5e010008o0.html">详解定位与定位应用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[详解定位之一：relative与absolute]]></title>
    <link href="http://xubinbin.github.io/blog/2014/07/15/relative-and-absolute/"/>
    <updated>2014-07-15T22:35:09+08:00</updated>
    <id>http://xubinbin.github.io/blog/2014/07/15/relative-and-absolute</id>
    <content type="html"><![CDATA[<p><strong>总结：</strong>给元素设置position: relative; 或position: absolute; 大部分情况下元素是在父级元素范围内定位的，唯一特殊的情况需要同时满足两个条件：当元素设置position: absolute; 且父级元素没有设置position时，元素就会突破父级元素的范围，以浏览器的左上角坐标为原点，配合TOP、RIGHT、BOTTOM、LEFT进行定位。</p>

<!--more-->


<p><strong>CSS2.0手册上的解释：</strong></p>

<p>设置此属性值为relative会保持对象在正常的HTML文档流中，它的位置根据它的前一个对象进行偏移和定位。</p>

<p>设置此属性值为absolute会将对象拖离出正常的HTML文档流，绝对定位而不考虑它周围内容的布局。</p>

<p><strong>具体分析：</strong></p>

<p>position: relative; 它的意思是相对定位，是参照父级元素的坐标原点为原点，配合TOP、RIGHT、BOTTOM、LEFT（下面简称TRBL）进行定位。当父级元素内有padding等CSS属性时，元素则参照父级内容区的原点进行定位。产生的相应定位情况如下图所示：</p>

<p><img src="http://xubinbin.qiniudn.com/relative.gif" title="展示position relative" alt="Alt position relative" /></p>

<p>position: absolute; 它的意思是绝对定位，是参照浏览器的左上角坐标为原点，配合TRBL进行定位。但要分成两种情况，有设定TRBL和没有设定TRBL的情况。
在没有设定TRBL时，默认参照父级内容区的原点进行定位。
在有设定TRBL时又可以分为两种情况：
1. 父级元素有设置position时，则以父级内容区的原点进行定位。
2. 父级元素没有设置position时，则以浏览器的左上角坐标为原点来定位，位置由TRBL决定。</p>

<p>相应定位情况如下图所示：</p>

<p><img src="http://xubinbin.qiniudn.com/absolute.gif" title="展示position absolute" alt="Alt position absolute" /></p>

<p><strong>两者区别：</strong></p>

<p>在相对定位中，虽然元素脱离了原来的文档流，但是在文档流中仍然为元素保留了专属空间。这就好比一个打工的人他到了外地，但是在老家依然为他保留了一个位置，这个位置不随他的移动而改变。</p>

<p>在绝对定位中，元素不光脱离了文档流，而且在文档流中也不再给这个元素保留专属空间。这就好比是一个工厂里的职位，如果有一个工人离职自然会由别的工人来填补这个空缺。</p>

<p>因此，相对定位是“相对于”元素自己在文档流中的初始位置定位，而绝对定位是“相对于”最近的已经定位的父级元素来说。</p>

<p><strong>实际应用：</strong></p>

<p>在实际的应用中，我们常常需要绝对定位的元素要能够随着网页分辨率的变化进行适当偏移，特别是当网页是居中形式的时候这种效果显得特别重要。而实现这种效果的基本方式就是为这个绝对定位元素的父级元素设置相对定位或绝对定位。那么绝对定位的元素就会以父级元素的坐标原点为原点进行定位。</p>

<p>虽然如此，但我们要记得，当父级元素内有padding等CSS属性时，这个坐标原点并不是父级元素的坐标原点，而要参照父级内容区的原点进行定位。举例说明如下图所示：</p>

<p><img src="http://xubinbin.qiniudn.com/apply.png" title="relative and absolute 应用" alt="Alt position apply" /></p>

<p>我们看到，这个图中父级为黑灰色区块，子级为青色区块。父级是相对定位，子级是绝对定位。子级设置了顶部位移50个像素，左倾位移50个像素。那么我们看，子级的坐标原点并不是从父级的坐标原点位移50个像素，而是从父级区块的padding左上边缘点为坐标原点（即A 点）开始位移。而父级这里如果要产生位置移动，或是浏览器窗口的大小有所变化都不会影响到这个绝对定位元素与父级的相对定位元素之间的位置关系。这个子级也不用调整数值。</p>

<p>本文参考了以下资源：</p>

<p>[1] <a href="http://www.blueidea.com/tech/web/2006/4249.asp">解读absolute与relative</a></p>

<p>[2] <a href="http://blog.sina.com.cn/s/blog_4bcf4a5e010008o0.html">详解定位与定位应用</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Windows下安装Git的详细步骤及说明]]></title>
    <link href="http://xubinbin.github.io/blog/2014/03/24/how-to-install-git-on-windows/"/>
    <updated>2014-03-24T16:44:52+08:00</updated>
    <id>http://xubinbin.github.io/blog/2014/03/24/how-to-install-git-on-windows</id>
    <content type="html"><![CDATA[<p>　　Git是一个免费的、开源的版本控制软件。在Windows下安装Git，一般为msysgit，官方下载地址为：
　　<a href="http://code.google.com/p/msysgit/downloads/list">http://code.google.com/p/msysgit/downloads/list</a></p>

<p>下载：</p>

<p>在官方网站，排在第一个的即为最新版本，点击下载。</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%98%E6%96%B9%E4%B8%8B%E8%BD%BD%E6%88%AA%E5%9B%BE.jpg" title="下载Git" alt="Alt Git Download" /></p>

<!--more-->


<p>安装：</p>

<p>Step 1 &mdash;&mdash; 欢迎界面，点击Next；</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B1.jpg" title="安装Git步骤1" alt="Alt Git Install" /></p>

<p>Step 2 &mdash;&mdash; 同意条款，点击Next；</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B2.jpg" title="安装Git步骤２" alt="Alt Git Install" /></p>

<p>Step 3 &mdash;&mdash; 选择程序安装路径，点击Next（比如我的应用程序都是装在E:\Program Files下，我就直接修改盘符为E）；</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B3.jpg" title="安装Git步骤３" alt="Alt Git Install" /></p>

<p>Step 4 &mdash;&mdash; 对照下图勾选安装选项，点击Next；</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B4-1.jpg" title="安装Git步骤４" alt="Alt Git Install" /></p>

<p>Step 5 &mdash;&mdash; 在开始菜单创建文件夹（勾选左下角方框可跳过创建，不推荐），点击Next；</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B5.jpg" title="安装Git步骤５" alt="Alt Git Install" /></p>

<p>Step 6 &mdash;&mdash; “Adjusting your PATH environment”选项：在Windows下，应选择第一个选项 Use Git Bash only，点击Next；</p>

<p>Tips:
1. PATH是操作系统用于查找来自命令行或终端窗口的必需可执行文件的系统变量。
2. Cygwin是用于在Windows操作系统上建立一个类似Unix的环境，执行Unix的指令及众多应用程序的模拟器。</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B6-1.jpg" title="安装Git步骤６" alt="Alt Git Install" /></p>

<p>Step 7 &mdash;&mdash; “Configuring the line ending conversions”选项：在Windows下，应选择第一个选项 Checkout Windows-style, commit Unix-style line endings，点击Next；</p>

<p>Tips:
1. 因为Git版本控管早期是为了维护庞大的Linux kernel而设计而成的，所以绝大部分的使用环境都是Linux平台。在Linux平台下，文字档案的预设断行符号为LF字元( \n ) ( 0x0A )。而在Windows环境下，文字档案的预设断行符号却是CRLF字元 ( \r\n ) ( 0x0D 0x0A )，比Linux多一个字元。
2. 第一个选项会让Git指令在执行的时候，自动转换断行符号。简单来说，就是“当执行git add命令将工作目录中的档案加入版本库时，文档中出现的CRLF断行字元会自动被转换成LF字元。同样的，当执行git checkout指令，取出版本库中的档案到工作目录时，文档中的LF字元也将会被自动转换成CRLF字元。
3. 如果你忘记在安装时设定的是第几个选项，可以执行git config core.autocrlf指令查询，若返回true，则表示选择的是第一个选项。</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B7.jpg" title="安装Git步骤７" alt="Alt Git Install" /></p>

<p>Step 8 &mdash;&mdash; 程序开始安装，稍等几十秒钟&hellip;</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B8.jpg" title="安装Git步骤８" alt="Alt Git Install" /></p>

<p>Step 9 &mdash;&mdash; 取消勾选，可不打开帮助文件。点击Finish，完成安装。</p>

<p><img src="http://xubinbin.qiniudn.com/git%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B9.jpg" title="安装Git步骤９" alt="Alt Git Install" /></p>

<p> 本文参考了以下资源：</p>

<p>[1] <a href="http://blog.miniasp.com/post/2013/09/15/Git-for-Windows-Line-Ending-Conversion-Notes.aspx">Git在Windows平台处理断行字元（CRLF）的注意事项</a></p>

<p>[2] <a href="http://buildamodule.com/video/change-management-and-version-control-installing-git-and-working-on-the-command-line-how-to-install-git-on-windows-with-mysysgit#viewing">How to install Git on Windows with msysgit</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享图片]]></title>
    <link href="http://xubinbin.github.io/blog/2014/03/21/mind-and-soul/"/>
    <updated>2014-03-21T23:32:26+08:00</updated>
    <id>http://xubinbin.github.io/blog/2014/03/21/mind-and-soul</id>
    <content type="html"><![CDATA[<p><img src="http://xubinbin.qiniudn.com/IMG_20140131-135825.jpg?imageView2/1/w/300/h/305" title="night" alt="Alt night" /></p>

<p>你生命中所发生的一切，都是你吸引来的。它们是被你心中所保持的‘心相’吸引而来，它们就是你所想的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first octopress blog]]></title>
    <link href="http://xubinbin.github.io/blog/2014/03/20/my-first-octopress-blog/"/>
    <updated>2014-03-20T13:20:18+08:00</updated>
    <id>http://xubinbin.github.io/blog/2014/03/20/my-first-octopress-blog</id>
    <content type="html"><![CDATA[<p>这两天折腾博客的框架基本上算完成了，现在也该写点内容了。有很多想写的，却反而不知道从哪里写起！
送给自己的话：2014梦开始的地方，有梦就不会结束，有些事情现在不做，真的可能一辈子都不会做了！</p>
]]></content>
  </entry>
  
</feed>
